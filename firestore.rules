rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /services/{serviceUID} {
      allow read;
      allow create: if isValidServiceCreation(request);
      allow update: if isValidServiceUpdate(request, resource);
    }
    match /users/{userUID} {
      allow read;
      allow update: if isValidUserUpdate(request, resource);
    }

    function isValidServiceUpdate(request, resource) {
      let inData = request.resource.data;
      let srcData = resource.data;

      let isProvider =  srcData.provider.uid == request.auth.uid;

      return isProvider
        && hasChangedOnlyServiceFields(inData, srcData)
        && hasValidServiceFields(inData);
    }

    function isValidServiceCreation(request) {
      let data = request.resource.data;
      let auth = request.auth;
      return isAuthed(auth)
      && hasOnlyServiceFields(data)
      && hasValidServiceFields(data)
      && isServiceProvider(data, auth);
    }

    function isValidUserUpdate(request, resource) {
      let inData = request.resource.data;
      let srcData = resource.data;

      let isUser = request.auth.uid == resource.id;
      
      return isUser
        && hasAllowedUserUpdateFields(inData, srcData)
        && hasValidUserUpdateFields(request)
        && hasWeekPassedSinceUserUpdate(inData, srcData)
    }

    function hasWeekPassedSinceUserUpdate(inData, srcData) {
      return duration.abs(inData.changedAt - srcData.get('changedAt', timestamp.value(0))) 
          > duration.value(1, 'w');
    }

    function hasValidUserUpdateFields(request) {
      return isValidString(request.resource.data.displayName, 50) 
        && request.resource.data.changedAt == request.time;
    }

    function hasAllowedUserUpdateFields(inData, srcData) {
      return inData.diff(srcData).removedKeys().size() == 0
      && inData.diff(srcData).affectedKeys().hasOnly(['displayName', 'changedAt']);
    }

    function hasChangedOnlyServiceFields(inData, srcData) {
      return inData.diff(srcData).addedKeys().size() == 0
        && inData.diff(srcData).removedKeys().size() == 0
        && inData.provider.diff(srcData.provider).affectedKeys().size() == 0;
    }
    
    function isServiceProvider(data, auth) {
      return data.provider.uid == auth.uid
        && get(/databases/$(database)/documents/users/$(data.provider.uid))
          .data.diff(data.provider).unchangedKeys()
          .hasAll(['displayName', 'photoURL'])
    }
    
    function hasValidServiceFields(data) {
      return 
        isValidString(data.title, 60)
        && isValidString(data.description, 280)
        && isValidString(data.details, 5000)
        && isValidString(data.etd, 60)
        && isValidString(data.provider.displayName, 60)
        && data.provider.displayName is string
        && data.provider.uid is string
        && data.provider.photoURL is string
        && data.price is number && data.price >= 0
        && data.revisions is number && data.revisions >= 0
        && data.images is list
        && data.tags is list
        && data.provider is map;
    }

    function isValidString(str, limit) {
      return str is string && str == str.trim() && str.size() <= limit;
    }

    function hasOnlyServiceFields(data) {
      return data.keys().hasOnly([
            'title',
            'description',
            'details',
            'price',
            'etd',
            'revisions',
            'images',
            'tags',
						'provider',
          ]) && data.provider.keys().hasOnly([
            'displayName',
            'photoURL',
            'uid',
          ]);
    }

    function isAuthed(auth) {
      return auth != null;
    }
  }
}